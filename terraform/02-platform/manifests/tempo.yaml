apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: tempo
  namespace: monitoring
spec:
  repo: https://grafana.github.io/helm-charts
  chart: tempo
  targetNamespace: monitoring
  createNamespace: true
  version: 1.20.0
  valuesContent: |-
    # Simple Grafana Tempo values for local development with LGTM stack

    # Basic deployment with single replica
    replicas: 1

    # Basic labels for easier identification
    labels:
      app: tempo
      environment: development

    # Pod annotations
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "3100"

    tempo:
      repository: grafana/tempo
      pullPolicy: IfNotPresent
      
      # Enable metrics generator for service graphs
      metricsGenerator:
        enabled: true
        remoteWriteUrl: "http://mimir-gateway/api/v1/push"
      
      # Set short retention for local development
      retention: 24h
      
      # Basic server config
      server:
        http_listen_port: 3100
      
      # Enable multitenancy if you plan to test multiple "tenants" 
      multitenancyEnabled: false
      
      # Storage configuration - using local storage for development
      storage:
        trace:
          backend: local
          local:
            path: /var/tempo/traces
          wal:
            path: /var/tempo/wal
      
      # Configure receivers for various trace formats
      receivers:
        jaeger:
          protocols:
            grpc:
              endpoint: 0.0.0.0:14250
            thrift_binary:
              endpoint: 0.0.0.0:6832
            thrift_compact:
              endpoint: 0.0.0.0:6831
            thrift_http:
              endpoint: 0.0.0.0:14268
        otlp:
          protocols:
            grpc:
              endpoint: "0.0.0.0:4317"
            http:
              endpoint: "0.0.0.0:4318"
      
      # Enable service graphs and span metrics
      overrides:
        defaults:
          metrics_generator:
            processors:
              - service-graphs
              - span-metrics
      
      # Reasonable resource limits for local development
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          memory: 512Mi

    # Enable tempoQuery (Jaeger UI) for local trace visualization
    tempoQuery:
      enabled: true
      service:
        port: 16686

    # Set up persistent storage for local development
    persistence:
      enabled: true
      size: 5Gi
      accessModes:
        - ReadWriteOnce

    # Create service for accessing Tempo
    service:
      type: ClusterIP
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3100"

    # Create service account
    serviceAccount:
      create: true

    # Basic pod security context
    securityContext:
      runAsUser: 10001
      runAsGroup: 10001
      fsGroup: 10001
      runAsNonRoot: true