apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: grafana
  namespace: grafana
spec:
  repo: https://grafana.github.io/helm-charts
  chart: grafana
  targetNamespace: grafana
  createNamespace: true
  version: 8.11.3
  valuesContent: |-
    # Simple Grafana values for local development with LGTM stack

    # Basic deployment configuration
    replicas: 1
    deploymentStrategy:
      type: RollingUpdate

    # Basic security configuration
    securityContext:
      runAsNonRoot: true
      runAsUser: 472
      runAsGroup: 472
      fsGroup: 472

    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: RuntimeDefault

    # Grafana image configuration
    image:
      repository: grafana/grafana
      pullPolicy: IfNotPresent

    # Service configuration
    service:
      enabled: true
      type: ClusterIP
      port: 80
      targetPort: 3000

    # Persistence for dashboards and settings
    persistence:
      enabled: true
      size: 5Gi
      accessModes:
        - ReadWriteOnce

    # Admin user setup
    adminUser: admin
    adminPassword: admin

    # Create RBAC resources
    rbac:
      create: true

    serviceAccount:
      create: true
      automountServiceAccountToken: true

    # Disable test framework for local development
    testFramework:
      enabled: false

    # Probe configuration
    readinessProbe:
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 10
      timeoutSeconds: 30
      failureThreshold: 10

    livenessProbe:
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 60
      timeoutSeconds: 30
      failureThreshold: 10

    # Resources for local development
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        memory: 512Mi

    # Grafana configuration
    grafana.ini:
      paths:
        data: /var/lib/grafana/
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      
      server:
        root_url: "%(protocol)s://%(domain)s:%(http_port)s/"
        serve_from_sub_path: false
      
      auth:
        disable_login_form: false
      
      auth.anonymous:
        enabled: true
        org_role: Viewer
      
      analytics:
        check_for_updates: false
        reporting_enabled: false
      
      log:
        mode: console
        level: info

    # Configure datasources for the LGTM stack
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
        - name: Prometheus
          type: prometheus
          url: http://mimir-gateway.mimir/prometheus
          access: proxy
          uid: prometheus

        - name: Loki
          type: loki
          uid: loki
          url: http://loki.loki:3100
          access: proxy

        - name: Tempo
          type: tempo
          uid: tempo
          url: http://tempo.tempo:3100
          access: proxy
          jsonData:
            httpMethod: GET
            tracesToLogsV2:
              # Field with an internal link pointing to a logs data source in Grafana.
              # datasourceUid value must match the uid value of the logs data source.
              datasourceUid: 'loki'
              spanStartTimeShift: '-1h'
              spanEndTimeShift: '1h'
              tags: ['job', 'instance', 'pod', 'namespace']
              filterByTraceID: false
              filterBySpanID: false
              customQuery: true
              query: 'method="$${__span.tags.method}"'
            tracesToMetrics:
              datasourceUid: 'prometheus'
              spanStartTimeShift: '-1h'
              spanEndTimeShift: '1h'
              tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
            serviceMap:
              datasourceUid: 'prometheus'
            nodeGraph:
              enabled: true
            search:
              hide: false
            traceQuery:
              timeShiftEnabled: true
              spanStartTimeShift: '-1h'
              spanEndTimeShift: '1h'
            spanBar:
              type: 'Tag'
              tag: 'http.path'
            streamingEnabled:
              search: true
