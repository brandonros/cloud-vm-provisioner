apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: postgresql
  namespace: kube-system
spec:
  repo: https://raw.githubusercontent.com/brandonros/hull-wrapper/master/
  chart: hull-wrapper
  targetNamespace: postgresql
  createNamespace: true
  version: 0.2.0
  valuesContent: |-
    hull:
      config:
        general:
          nameOverride: postgresql
          rbac: false
          noObjectNamePrefixes: true
      objects:
        serviceaccount:
          default:
            enabled: false
        configmap:
          postgresql-config:
            data:
              postgresql.conf:
                inline: |
                  # replication
                  hot_standby = on
                  wal_level = replica
                  max_wal_senders = 3

                  # Connection Settings
                  listen_addresses = '*'
                  max_connections = 100
                  superuser_reserved_connections = 10
                  
                  # Memory Settings
                  shared_buffers = 256MB               
                  work_mem = 4MB                     
                  maintenance_work_mem = 64MB
                  effective_cache_size = 512MB
                  huge_pages = try
                  
                  # Parallel Processing
                  max_worker_processes = 2
                  max_parallel_workers = 2
                  max_parallel_workers_per_gather = 1
                  max_parallel_maintenance_workers = 1
                  
                  # Performance Settings
                  random_page_cost = 1.1
                  effective_io_concurrency = 200
                  seq_page_cost = 1
                  
                  # WAL Settings
                  wal_buffers = 16MB
                  wal_writer_delay = 10ms             # Faster WAL writes
                  wal_writer_flush_after = 1MB        # Flush more frequently
                  checkpoint_completion_target = 0.9  # Keep this
                  checkpoint_timeout = 10min          # More frequent checkpoints for high load
                  max_wal_size = 1GB
                  min_wal_size = 80MB
                  
                  # Connection and Statement Timeouts
                  statement_timeout = 30s
                  idle_in_transaction_session_timeout = 60s
                  lock_timeout = 10s
                  deadlock_timeout = 1s
                  
                  # Logging
                  log_min_duration_statement = 1000
                  log_connections = off
                  log_disconnections = off
                  log_lock_waits = on                 # Keep for debugging serialization issues
                  log_temp_files = 100MB              # Only log large temp files
                  log_checkpoints = on                # Monitor checkpoint performance
                  
                  # Statistics and Monitoring
                  track_activities = on
                  track_counts = on
                  track_io_timing = on
                  track_functions = pl
                  
                  # Background Writer
                  bgwriter_delay = 200ms
                  bgwriter_lru_maxpages = 100
                  bgwriter_lru_multiplier = 2.0
                  bgwriter_flush_after = 512kB
                  
                  # Auto-vacuum
                  autovacuum = on
                  autovacuum_max_workers = 3
                  autovacuum_naptime = 30s            # Was 1min, more frequent
                  autovacuum_vacuum_threshold = 25    # Was 50, more aggressive
                  autovacuum_analyze_threshold = 25   # Was 50, more aggressive
                  autovacuum_vacuum_scale_factor = 0.1 # Was 0.2, more aggressive
                  autovacuum_analyze_scale_factor = 0.05 # Was 0.1, more aggressive
                  autovacuum_vacuum_cost_limit = 2000 # Higher cost limit for faster vacuum
                  
                  # Network settings
                  tcp_keepalives_idle = 300           # More aggressive keepalives
                  tcp_keepalives_interval = 15        # More frequent
                  tcp_keepalives_count = 3
                  
                  # Additional high-performance settings
                  fsync = on                          # Keep data safety
                  full_page_writes = on               # Keep data safety
                  wal_compression = on                # Compress WAL for better throughput
                  
                  # JIT compilation for complex queries
                  jit = on
                  jit_above_cost = 100000
                  jit_optimize_above_cost = 500000
                  
                  # Shared preload libraries for performance extensions
                  shared_preload_libraries = 'pg_stat_statements'
        service:
          postgresql:
            ports:
              postgresql:
                port: 5432
                targetPort: 5432
        statefulset:
          postgresql:
            serviceName: postgresql
            replicas: 1
            
            pod:
              initContainers:
                config-setup:
                  image:
                    repository: postgres
                    tag: 17.5-bookworm
                  command:
                    - /bin/bash
                    - -c
                    - |
                      if [ ! -f "$PGDATA/PG_VERSION" ]; then
                        echo "Initializing database..."
                        docker-entrypoint.sh postgres --version
                        cp /tmp/postgresql.conf "$PGDATA/postgresql.conf"
                        chown postgres:postgres "$PGDATA/postgresql.conf"
                        echo "Custom postgresql.conf copied successfully"
                      else
                        echo "Database already exists, updating config..."
                        cp /tmp/postgresql.conf "$PGDATA/postgresql.conf"
                        chown postgres:postgres "$PGDATA/postgresql.conf"
                      fi
                  env:
                    POSTGRES_PASSWORD:
                      value: "Test_Password123!"
                    PGDATA:
                      value: "/var/lib/postgresql/data/pgdata"
                  volumeMounts:
                    data:
                      name: postgres-data
                      mountPath: /var/lib/postgresql/data
                    config:
                      name: config
                      mountPath: /tmp/postgresql.conf
                      subPath: postgresql.conf
              containers:
                postgresql:
                  image:
                    repository: postgres
                    tag: 17.5-bookworm
                  
                  ports:
                    postgresql:
                      containerPort: 5432
                  
                  env:
                    POSTGRES_PASSWORD:
                      value: "Test_Password123!"
                    PGDATA:
                      value: "/var/lib/postgresql/data/pgdata"
                  
                  # MASSIVE RESOURCE INCREASE - USE YOUR HARDWARE!
                  resources:
                    requests:
                      cpu: "2"      # Instead of 12
                      memory: "8Gi" # Instead of 48Gi
                    limits:
                      cpu: "8"      # Instead of 18
                      memory: "16Gi" # Instead of 56Gi
                  
                  volumeMounts:
                    data:
                      name: postgres-data
                      mountPath: /var/lib/postgresql/data
              
              volumes:
                config:
                  configMap:
                    name: postgresql-config
            
            volumeClaimTemplates:
              - metadata:
                  name: postgres-data
                spec:
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: 8Gi
