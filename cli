#!/bin/bash

set -e

SCRIPT=$(readlink -f "$0")
SCRIPT_PATH=$(dirname "$SCRIPT")

export TF_SKIP_PROVIDER_VERIFY=true
export CLOUD_PROVIDER="local"
export ARM_SUBSCRIPTION_ID="16c3f0f7-3a06-449e-8ac6-ec2d63078996"

check_dependencies() {
    # Define required dependencies
    dependencies=("terraform" "ssh" "telnet" "jq")

    # Check each dependency
    for cmd in "${dependencies[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "$cmd is not installed"
            exit 1
        fi
    done
}

check_ssh_key() {
    # azure does not support id_ed25519

    # check for ssh key
    if [ ! -e "$HOME/.ssh/id_rsa.pub" ]
    then
        echo "SSH key does not exist"
        exit 1
    fi
}

check_cloud_credentials() {
    # CLOUD_PROVIDER
    if [ -z "${CLOUD_PROVIDER}" ]
    then
        echo "CLOUD_PROVIDER is not set"
        exit 1
    fi

    # cloud provider credentials
    if [ "$CLOUD_PROVIDER" == "google_cloud" ]
    then
        if [ -z "${GOOGLE_APPLICATION_CREDENTIALS}" ]
        then
            echo "GOOGLE_APPLICATION_CREDENTIALS is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "vultr" ]
    then
        if [ -z "${VULTR_API_KEY}" ]
        then
            echo "VULTR_API_KEY is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "azure" ]
    then
        if [ -z "${ARM_SUBSCRIPTION_ID}" ]
        then
            echo "ARM_SUBSCRIPTION_ID is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "digitalocean" ]
    then
        if [ -z "${DIGITALOCEAN_TOKEN}" ]
        then
            echo "DIGITALOCEAN_TOKEN is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "hetzner" ]
    then
        if [ -z "${HCLOUD_TOKEN}" ]
        then
            echo "HCLOUD_TOKEN is not set"
            exit 1
        fi
        elif [ "$CLOUD_PROVIDER" == "aws" ]
        then
        if [ -z "${AWS_ACCESS_KEY_ID}" ]
        then
            echo "AWS_ACCESS_KEY_ID is not set"
            exit 1
        fi
        if [ -z "${AWS_SECRET_ACCESS_KEY}" ]
        then
            echo "AWS_SECRET_ACCESS_KEY is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "lima" ]
    then
        if ! command -v limactl &> /dev/null
        then
            echo "limactl is not installed"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "local" ]
    then
        echo "TODO: check something for local"
    elif [ "$CLOUD_PROVIDER" == "oracle" ]
    then
        echo "TODO: check for private key file"
    else
        echo "unknown cloud provider: $CLOUD_PROVIDER"
        exit 1
    fi
}

accept_ssh_key() {
    # Remove any old fingerprint from IPs being re-used, only if it exists
    if ssh-keygen -F $instance_ipv4 > /dev/null 2>&1; then
        ssh-keygen -R $instance_ipv4
    fi

    # Accept the SSH fingerprint
    if ! ssh-keygen -F $instance_ipv4 > /dev/null
    then
        ssh-keyscan -H -p ${instance_ssh_port} $instance_ipv4 >> ~/.ssh/known_hosts
    fi
}

wait_for_host() {
    echo "Waiting for ${instance_ipv4} to become available on port ${instance_ssh_port}..."
    while ! (echo > /dev/tcp/${instance_ipv4}/${instance_ssh_port}) 2>/dev/null
    do
        sleep 1
    done
    echo "${instance_ipv4} is now available."
}

terraform_destroy() {
    module=$1

    pushd terraform/$module/
    terraform init
    terraform destroy -auto-approve
    popd
}

terraform_apply() {
    module=$1
    pushd terraform/$module/
    terraform init
    terraform apply -auto-approve
    popd
}

create_cluster_ssh_tunnel() {
    # Function to check if the tunnel is already running
    is_tunnel_running() {
        if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
            tasklist | grep -q "[s]sh.exe.*6443:localhost:6443.*${instance_ipv4}"
        else
            pgrep -f "ssh.*-L 6443:localhost:6443.*${instance_ipv4}" > /dev/null
        fi
    }

    echo "Checking for existing SSH tunnel..."

    if is_tunnel_running; then
        echo "SSH tunnel already running"
    else
        echo "Starting SSH tunnel..."
        ssh -fN -L 6443:localhost:6443 -p ${instance_ssh_port} ${instance_username}@${instance_ipv4}
    fi
}

cmd_create() {
    # 1. Pre-flight checks
    check_dependencies
    check_ssh_key
    check_cloud_credentials

    # 2. Infrastructure provisioning
    terraform_apply 00-vm
    load_instance_details

    # 3. Cluster bootstrap
    wait_for_host
    accept_ssh_key
    terraform_apply 01-k3s
    create_cluster_ssh_tunnel

    # 4. Platform setup
    terraform_apply 02-platform

    # 5. Workload deployment
    export TF_VAR_duckdns_token="$DUCKDNS_TOKEN"
    terraform_apply 03-workloads
}

load_instance_details() {
    pushd terraform/00-vm/

    # Check if terraform outputs exist and are not empty
    if [ "$(terraform output -json 2>/dev/null)" = "{}" ]; then
        echo "Error: No terraform outputs found."
        exit 1
    fi
    
    # Get and verify each output
    instance_ipv4=$(terraform output -raw instance_ipv4 2>/dev/null) || { echo "Error: instance_ipv4 output not found"; exit 1; }
    instance_username=$(terraform output -raw instance_username 2>/dev/null) || { echo "Error: instance_username output not found"; exit 1; }
    instance_ssh_port=$(terraform output -raw instance_ssh_port 2>/dev/null) || { echo "Error: instance_ssh_port output not found"; exit 1; }
    
    popd
}

cmd_connect() {
    load_instance_details

    # TODO: make sure we have provisioned and these variables are set correctly

    ssh -p $instance_ssh_port $instance_username@$instance_ipv4
}


cmd_cleanup() {
    # kill tunnels
    if pgrep -f "ssh.*-L 6443:localhost:6443.*" > /dev/null
    then
        pkill -f "ssh.*-L 6443:localhost:6443.*"
    fi

    # terraform destroy
    terraform_destroy 00-vm

    # cleanup temp files
    rm -rf /tmp/vm_info.txt
    rm -rf $SCRIPT_PATH/terraform/01-k3s/kubeconfig

    # cleanup all tfstate files
    pushd terraform
    find ./00-vm ./01-k3s ./02-platform ./03-workloads \
        -type d -name ".terraform" -exec rm -rf {} \; -prune \
        -o -type f -name ".terraform.lock.hcl" -delete \
        -o -type f -name "*.tfstate" -delete \
        -o -type f -name "*.tfstate.backup" -delete
    popd
}

# usage
usage() {
    echo "Usage: cli <command>"
    echo ""
    echo "Commands:"
    echo "  create      Create a new instance"
    echo "  connect     SSH into the instance"
    echo "  cleanup     Destroy the instance and clean up local files"
    echo "  help        Show this help message"
}

# route commands
case $1 in
    create)
        cmd_create
        ;;
    connect)
        cmd_connect
        ;;
    cleanup)
        cmd_cleanup
        ;;
    help|--help|-h|"")
        usage
        ;;
    *)
        echo "Unknown command: $1"
        usage
        exit 1
        ;;
esac
