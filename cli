#!/bin/bash

set -e

SCRIPT=$(readlink -f "$0")
SCRIPT_PATH=$(dirname "$SCRIPT")

check_dependencies() {
    # Define required dependencies
    dependencies=("terraform" "ansible" "kubectl" "ssh" "nc")

    # Check each dependency
    for cmd in "${dependencies[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "$cmd is not installed"
            exit 1
        fi
    done
}

check_ssh_key() {
    # check for ssh key
    if [ ! -e "$HOME/.ssh/id_rsa.pub" ]
    then
        echo "SSH key does not exist"
        exit 1
    fi
}

check_cloud_credentials() {
    # CLOUD_PROVIDER
    if [ -z "${CLOUD_PROVIDER}" ]
    then
        echo "CLOUD_PROVIDER is not set"
        exit 1
    fi

    # duckdns
    if [ -z "${DUCKDNS_TOKEN}" ]
    then
        echo "DUCKDNS_TOKEN is not set"
        exit 1
    fi
    if [ -z "${DUCKDNS_WORDPRESS_DOMAIN}" ]
    then
        echo "DUCKDNS_WORDPRESS_DOMAIN is not set"
        exit 1
    fi
    if [ -z "${DUCKDNS_PDF_GENERATOR_DOMAIN}" ]
    then
        echo "DUCKDNS_PDF_GENERATOR_DOMAIN is not set"
        exit 1
    fi

    # cloud provider credentials
    if [ "$CLOUD_PROVIDER" == "google_cloud" ]
    then
        if [ -z "${GOOGLE_APPLICATION_CREDENTIALS}" ]
        then
            echo "GOOGLE_APPLICATION_CREDENTIALS is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "vultr" ]
    then
        if [ -z "${VULTR_API_KEY}" ]
        then
            echo "VULTR_API_KEY is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "azure" ]
    then
        if [ -z "${ARM_SUBSCRIPTION_ID}" ]
        then
            echo "ARM_SUBSCRIPTION_ID is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "digitalocean" ]
    then
        if [ -z "${DIGITALOCEAN_TOKEN}" ]
        then
            echo "DIGITALOCEAN_TOKEN is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "hetzner" ]
    then
        if [ -z "${HCLOUD_TOKEN}" ]
        then
            echo "HCLOUD_TOKEN is not set"
            exit 1
        fi
        elif [ "$CLOUD_PROVIDER" == "aws" ]
        then
        if [ -z "${AWS_ACCESS_KEY_ID}" ]
        then
            echo "AWS_ACCESS_KEY_ID is not set"
            exit 1
        fi
        if [ -z "${AWS_SECRET_ACCESS_KEY}" ]
        then
            echo "AWS_SECRET_ACCESS_KEY is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "lima" ]
    then
        if ! command -v limactl &> /dev/null
        then
            echo "limactl is not installed"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "oracle" ]
    then
        echo "TODO: check for private key file"
    else
        echo "unknown cloud provider: $CLOUD_PROVIDER"
        exit 1
    fi
}

terraform_apply() {
    pushd terraform/$CLOUD_PROVIDER/
    terraform init
    terraform apply -auto-approve
    popd
}

accept_ssh_key() {
    # Remove any old fingerprint from IPs being re-used, only if it exists
    if ssh-keygen -F $instance_ipv4 > /dev/null 2>&1; then
        ssh-keygen -R $instance_ipv4
    fi

    # Accept the SSH fingerprint
    if ! ssh-keygen -F $instance_ipv4 > /dev/null
    then
        ssh-keyscan -H -p ${instance_ssh_port} $instance_ipv4 >> ~/.ssh/known_hosts
    fi
}

create_ansible_inventory() {
    # Create Ansible inventory file
    echo "[my_instance]" > /tmp/hosts.ini
    echo "${instance_ipv4} ansible_user=${instance_username} ansible_port=${instance_ssh_port}" >> /tmp/hosts.ini
}

run_ansible_playbooks() {
  # create server-files directory
  mkdir -p server-files

  # Run Ansible playbooks
  ansible-playbook -i /tmp/hosts.ini ./ansible/setup.yaml
  ansible-playbook -i /tmp/hosts.ini ./ansible/k3s.yaml
}

wait_for_host() {
    echo "Waiting for ${instance_ipv4} to become available on port ${instance_ssh_port}..."
    while ! nc -z ${instance_ipv4} ${instance_ssh_port}
    do
        sleep 1
    done
    echo "${instance_ipv4} is now available."
}

terraform_destroy() {
    pushd terraform/$CLOUD_PROVIDER/
    terraform init
    terraform destroy -auto-approve
    popd
}

wait_for_resource() {
    local type=$1
    local name=$2
    local namespace=$3
    local timeout=${4:-120s}

    echo "Waiting for $type $name in namespace $namespace..."
    kubectl wait --for=create $type/$name -n $namespace --timeout=$timeout || return 1
    if [ "$type" = "deployment" ]; then
        kubectl wait --for=condition=available $type/$name -n $namespace --timeout=$timeout || return 1
    fi
    kubectl rollout status $type/$name -n $namespace --watch || return 1
}

wait_for_deployment() {
    local name=$1
    local namespace=$2
    local timeout=${3:-120s}

    wait_for_resource deployment $name $namespace $timeout
}

wait_for_job() {
    local name=$1
    local namespace=$2
    local timeout=${3:-120s}

    kubectl wait --for=create job/$name --timeout=$timeout || return 1
    kubectl wait --for=condition=complete job/$name --timeout=$timeout || return 1
    if [[ $(kubectl get job $name -o jsonpath='{.status.succeeded}') != "1" ]]; then
        echo "$name job failed"
        kubectl logs job/$name
        exit 1
    fi
}

wait_for_httproute() {
    local name=$1
    local namespace=$2
    local timeout=${3:-120s}

    kubectl wait --for=create httproute/$name -n $namespace --timeout=$timeout || return 1
    kubectl wait --for=jsonpath='{.status.parents[0].conditions[?(@.type=="Accepted")].status}'=True httproute/$name -n $namespace --timeout=$timeout || return 1
}

spawn_ssh_tunnel() {
    if [[ "$OSTYPE" == "darwin"* ]] || [[ "$OSTYPE" == "linux"* ]]
    then
        if ! pgrep -f "ssh.*-L 6443:localhost:6443.*$instance_ipv4" > /dev/null; then
            echo "Starting SSH tunnel..."
            ssh -fN -L 6443:localhost:6443 -p $instance_ssh_port $instance_username@$instance_ipv4
            pgrep -f "ssh.*-L 6443:localhost:6443.*$instance_ipv4" > /tmp/ssh_tunnel.pid
        else
            echo "SSH tunnel already running"
        fi
    else
        echo "TODO: pgrep equivalent for windows"
    fi
}

check_kubectl_connection() {
    echo "Checking kubectl connection..."
    if ! kubectl get nodes &>/dev/null; then
        echo "Error: Cannot connect to kubernetes cluster"
        exit 1
    fi
}

cmd_create() {
    check_dependencies
    check_ssh_key
    check_cloud_credentials
    terraform_apply
    load_instance_details
    wait_for_host
    accept_ssh_key
    create_ansible_inventory
    run_ansible_playbooks
}

cmd_apply() {
    # check dependencies
    check_dependencies

    # load instance details
    load_instance_details

    # set paths
    KUSTOMIZE_PATH=$SCRIPT_PATH/kustomize
    SERVER_FILES_PATH=$SCRIPT_PATH/server-files

    # check for existing tunnel and spawn if needed
    spawn_ssh_tunnel

    # set kubeconfig path
    KUBECONFIG_PATH=$(readlink -f "$SERVER_FILES_PATH/kubeconfig")
    export KUBECONFIG="$KUBECONFIG_PATH"

    # verify kubectl connection
    check_kubectl_connection

    ## gateway-api
    if ! kubectl get crd gatewayclasses.gateway.networking.k8s.io -o json | jq -e '.status.storedVersions | contains(["v1"])' >/dev/null
    then
        kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.1/standard-install.yaml
        kubectl wait --for condition=established --timeout=60s crd/gatewayclasses.gateway.networking.k8s.io
    fi

    ## 000-metrics-server
    echo "deploying metrics-server"
    kustomize build $KUSTOMIZE_PATH/000-metrics-server | envsubst | kubectl apply -f -
    wait_for_deployment metrics-server kube-system

    ## 001-duckdns
    echo "deploying duckdns"
    kubectl delete job duckdns-updater-wordpress --ignore-not-found=true
    kubectl delete job duckdns-updater-pdf-generator --ignore-not-found=true
    kustomize build $KUSTOMIZE_PATH/001-duckdns | envsubst '${DUCKDNS_TOKEN},${DUCKDNS_PDF_GENERATOR_DOMAIN},${DUCKDNS_WORDPRESS_DOMAIN}'| kubectl apply -f -
    wait_for_job duckdns-updater-wordpress
    wait_for_job duckdns-updater-pdf-generator

    ## 002-cert-manager
    echo "deploying cert-manager"
    kustomize build $KUSTOMIZE_PATH/002-cert-manager | envsubst | kubectl apply -f -
    echo "Waiting for cert-manager deployments to be created..."
    wait_for_deployment cert-manager cert-manager
    wait_for_deployment cert-manager-webhook cert-manager
    wait_for_deployment cert-manager-cainjector cert-manager
    echo "Waiting for cert-manager CRDs to be established..."
    kubectl wait --for=condition=established --timeout=120s crd/clusterissuers.cert-manager.io
    kubectl wait --for=condition=established --timeout=120s crd/certificates.cert-manager.io
    kubectl wait --for=condition=established --timeout=120s crd/certificaterequests.cert-manager.io

    ## 003-traefik
    echo "deploying traefik"
    kustomize build $KUSTOMIZE_PATH/003-traefik | envsubst | kubectl apply -f -
    wait_for_deployment traefik traefik

    ## 004-traefik-gateway
    echo "deploying traefik-gateway"
    kustomize build $KUSTOMIZE_PATH/004-traefik-gateway | envsubst | kubectl apply -f -
    echo "Waiting for traefik gateway secrets to be created..."
    kubectl wait --for=create secret/wordpress-prod-tls -n traefik --timeout=300s
    kubectl wait --for=create secret/pdf-generator-prod-tls -n traefik --timeout=300s

    ## 005-wordpress
    echo "deploying wordpress"
    kustomize build $KUSTOMIZE_PATH/005-wordpress | envsubst | kubectl apply -f -
    wait_for_deployment wordpress wordpress

    ## 006-pdf-generator
    echo "deploying pdf-generator"
    kustomize build $KUSTOMIZE_PATH/006-pdf-generator | envsubst | kubectl apply -f -
    wait_for_deployment pdf-generator pdf-generator

    ## 007-traefik-routes
    echo "deploying traefik-routes"
    kustomize build $KUSTOMIZE_PATH/007-traefik-routes | envsubst | kubectl apply -f -
    wait_for_httproute pdf-generator-httproute traefik
    wait_for_httproute wordpress-httproute traefik
}

load_instance_details() {
    pushd terraform/$CLOUD_PROVIDER/

    # Check if terraform outputs exist and are not empty
    if [ "$(terraform output -json 2>/dev/null)" = "{}" ]; then
        echo "Error: No terraform outputs found."
        exit 1
    fi
    
    # Get and verify each output
    instance_ipv4=$(terraform output -raw instance_ipv4 2>/dev/null) || { echo "Error: instance_ipv4 output not found"; exit 1; }
    instance_username=$(terraform output -raw instance_username 2>/dev/null) || { echo "Error: instance_username output not found"; exit 1; }
    instance_ssh_port=$(terraform output -raw ssh_port 2>/dev/null) || { echo "Error: ssh_port output not found"; exit 1; }
    
    popd
}

cmd_connect() {
    load_instance_details

    # TODO: make sure we have provisioned and these variables are set correctly

    ssh -p $instance_ssh_port $instance_username@$instance_ipv4
}

cmd_cleanup() {
    # kill ssh tunnel
    if [ -f /tmp/ssh_tunnel.pid ]; then
        kill $(cat /tmp/ssh_tunnel.pid)
        rm /tmp/ssh_tunnel.pid
    fi

    # terraform destroy
    terraform_destroy

    # Cleanup server-files
    rm -rf $SCRIPT_PATH/server-files

    # cleanup temp files
    rm -rf /tmp/hosts.ini
    rm -rf /tmp/vm_info.txt
}

# usage
usage() {
    echo "Usage: cli <command>"
    echo ""
    echo "Commands:"
    echo "  create      Create a new instance"
    echo "  apply       Apply Kubernetes manifests to the instance"
    echo "  connect     SSH into the instance"
    echo "  cleanup     Destroy the instance and clean up local files"
    echo "  help        Show this help message"
}

# route commands
case $1 in
    create)
        cmd_create
        ;;
    apply)
        cmd_apply
        ;;
    connect)
        cmd_connect
        ;;
    cleanup)
        cmd_cleanup
        ;;
    help|--help|-h|"")
        usage
        ;;
    *)
        echo "Unknown command: $1"
        usage
        exit 1
        ;;
esac
