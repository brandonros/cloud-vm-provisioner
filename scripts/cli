#!/bin/bash

set -e

SCRIPT=$(readlink -f "$0")
SCRIPT_PATH=$(dirname "$SCRIPT")

# pick cloud provider
#CLOUD_PROVIDER="google_cloud"
#CLOUD_PROVIDER="vultr"
#CLOUD_PROVIDER="azure"
#CLOUD_PROVIDER="digitalocean"
#CLOUD_PROVIDER="aws"
#CLOUD_PROVIDER="oracle"
#CLOUD_PROVIDER="hetzner"
CLOUD_PROVIDER="lima"

check_dependencies() {
    # Define required dependencies
    dependencies=("terraform" "ansible" "kubectl" "ssh" "nc")

    # Check each dependency
    for cmd in "${dependencies[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "$cmd is not installed"
            exit 1
        fi
    done
}

check_ssh_key() {
    # check for ssh key
    if [ ! -e "$HOME/.ssh/id_rsa.pub" ]
    then
        echo "SSH key does not exist"
        exit 1
    fi
}

check_cloud_credentials() {
    # check for env var
    if [ "$CLOUD_PROVIDER" == "google_cloud" ]
    then
        if [ -z "${GOOGLE_APPLICATION_CREDENTIALS}" ]
        then
            echo "GOOGLE_APPLICATION_CREDENTIALS is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "vultr" ]
    then
        if [ -z "${VULTR_API_KEY}" ]
        then
            echo "VULTR_API_KEY is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "azure" ]
    then
        if [ -z "${ARM_SUBSCRIPTION_ID}" ]
        then
            echo "ARM_SUBSCRIPTION_ID is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "digitalocean" ]
    then
        if [ -z "${DIGITALOCEAN_TOKEN}" ]
        then
            echo "DIGITALOCEAN_TOKEN is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "hetzner" ]
    then
        if [ -z "${HCLOUD_TOKEN}" ]
        then
            echo "HCLOUD_TOKEN is not set"
            exit 1
        fi
        elif [ "$CLOUD_PROVIDER" == "aws" ]
        then
        if [ -z "${AWS_ACCESS_KEY_ID}" ]
        then
            echo "AWS_ACCESS_KEY_ID is not set"
            exit 1
        fi
        if [ -z "${AWS_SECRET_ACCESS_KEY}" ]
        then
            echo "AWS_SECRET_ACCESS_KEY is not set"
            exit 1
        fi
    elif [ "$CLOUD_PROVIDER" == "lima" ]
    then
        if ! command -v limactl &> /dev/null
        then
            echo "limactl is not installed"
            exit 1
        fi
    fi
}

terraform_apply() {
    pushd terraform/$CLOUD_PROVIDER/
    terraform init
    terraform apply -auto-approve
    popd
}

accept_ssh_key() {
    # Remove any old fingerprint from IPs being re-used, only if it exists
    if ssh-keygen -F $instance_ipv4 > /dev/null 2>&1; then
        ssh-keygen -R $instance_ipv4
    fi

    # Accept the SSH fingerprint
    if ! ssh-keygen -F $instance_ipv4 > /dev/null
    then
        ssh-keyscan -H -p ${instance_ssh_port} $instance_ipv4 >> ~/.ssh/known_hosts
    fi
}


create_ansible_inventory() {
    # Create Ansible inventory file
    echo "[my_instance]" > /tmp/hosts.ini
    echo "${instance_ipv4} ansible_user=${instance_username} ansible_port=${instance_ssh_port}" >> /tmp/hosts.ini
}

run_ansible_playbooks() {
  # create server-files directory
  mkdir -p server-files

  # Run Ansible playbooks
  ansible-playbook -i /tmp/hosts.ini ./ansible/setup.yaml
  ansible-playbook -i /tmp/hosts.ini ./ansible/k3s.yaml
}

wait_for_host() {
    echo "Waiting for ${instance_ipv4} to become available on port ${instance_ssh_port}..."
    while ! nc -z ${instance_ipv4} ${instance_ssh_port}
    do
        sleep 1
    done
    echo "${instance_ipv4} is now available."
}

terraform_destroy() {
    pushd terraform/$CLOUD_PROVIDER/
    terraform init
    terraform destroy -auto-approve
    popd
}

uninstall_certificate() {
    # delete k3s-server-ca certificates
    if [[ "$OSTYPE" == "darwin"* ]]
    then
        CERTS=$(security find-certificate -a -c "k3s-server-ca" | grep "alis" | cut -d'"' -f4)
        if [ -z "$CERTS" ]; then
            echo "No k3s-server-ca certificates found"
        fi
        for cert in $CERTS; do
            echo "Found certificate: $cert"
            echo "Deleting..."
            if sudo security delete-certificate -c "$cert"; then
                echo "Successfully deleted $cert"
            else
                echo "Failed to delete $cert"
            fi
        done
    else
        echo "TODO: delete k3s-server-ca certificates on non-macOS systems"
    fi
}

remove_hosts_entry() {
    # remove entries from /etc/hosts
    if [[ "$OSTYPE" == "darwin"* ]] || [[ "$OSTYPE" == "linux"* ]]
    then
        if grep -q "grafana.debian-k3s" /etc/hosts; then
            sudo sed -i '' "/grafana.debian-k3s/d" /etc/hosts
            echo "Removed hosts entries containing grafana.debian-k3s"
        else
            echo "No hosts entries containing grafana.debian-k3s found"
        fi
    else
        echo "TODO: remove entries from /etc/hosts on non-macOS and non-Linux systems"
    fi
}

wait_for_deployment() {
    local deployment=$1
    local namespace=$2
    local timeout=${3:-120s}

    echo "Waiting for deployment $deployment in namespace $namespace..."
    kubectl wait --for=create deployment/$deployment -n $namespace --timeout=$timeout || return 1
    kubectl wait --for=condition=available deployment/$deployment -n $namespace --timeout=$timeout || return 1
    kubectl rollout status deployment/$deployment -n $namespace --watch || return 1
}

trust_k3s_ca() {
    if [[ "$OSTYPE" == "darwin"* ]]
    then
        echo "trusting k3s-generated CA on macOS"
        CERT_NAME="k3s-server-ca"
        SYSTEM_KEYCHAIN="/Library/Keychains/System.keychain"
        if ! security find-certificate -c "$CERT_NAME" "$SYSTEM_KEYCHAIN" > /dev/null 2>&1; then
            echo "Adding certificate to system keychain..."
            sudo security add-trusted-cert -d -r trustRoot -k "$SYSTEM_KEYCHAIN" "$SERVER_FILES_PATH/server-ca.crt"
        fi
    else
        echo "TODO: trust k3s-generated CA on non-macOS systems"
    fi
}

update_hosts_file() {
    if [[ "$OSTYPE" == "darwin"* ]] || [[ "$OSTYPE" == "linux"* ]]
    then
        echo "Adding entries to /etc/hosts"
        HOSTS_ENTRY="$instance_ipv4 grafana.debian-k3s tempo.debian-k3s prometheus.debian-k3s linkerd-viz.debian-k3s graphite.debian-k3s kibana.debian-k3s elasticsearch.debian-k3s"
        if ! grep -qF "$HOSTS_ENTRY" /etc/hosts; then
            echo "$HOSTS_ENTRY" | sudo tee -a /etc/hosts
        fi
    else
        echo "TODO: /etc/hosts update for non-macOS and non-Linux systems"
    fi
}

spawn_ssh_tunnel() {
    if [[ "$OSTYPE" == "darwin"* ]] || [[ "$OSTYPE" == "linux"* ]]
    then
        if ! pgrep -f "ssh.*-L 6443:localhost:6443.*$instance_ipv4" > /dev/null; then
            echo "Starting SSH tunnel..."
            ssh -fN -L 6443:localhost:6443 -p $instance_ssh_port $instance_username@$instance_ipv4
        else
            echo "SSH tunnel already running"
        fi
    else
        echo "TODO: pgrep equivalent for windows"
    fi
}

# workaround traefik needing v1.1.1 gateway-api and linkerd needing v0.8.1 gateway-api crds
deploy_gateway_api() {
    if ! kubectl get crd gatewayclasses.gateway.networking.k8s.io -o json | jq -e '.status.storedVersions | contains(["v1beta1"])' >/dev/null
    then
        kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v0.8.1/experimental-install.yaml
        kubectl wait --for condition=established --timeout=60s crd/httproutes.gateway.networking.k8s.io
        kubectl wait --for condition=available --timeout=60s deployment/gateway-api-admission-server -n gateway-system
        kubectl rollout status deployment/gateway-api-admission-server -n gateway-system --watch

        kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.1/experimental-install.yaml
        kubectl wait --for condition=established --timeout=60s crd/backendlbpolicies.gateway.networking.k8s.io
    fi
}

cmd_create() {
    check_dependencies
    check_ssh_key
    check_cloud_credentials
    terraform_apply
    load_instance_details
    wait_for_host
    accept_ssh_key
    create_ansible_inventory
    run_ansible_playbooks
}

cmd_apply() {
    check_dependencies
    load_instance_details

    KUSTOMIZE_PATH=$SCRIPT_PATH/../kustomize
    SERVER_FILES_PATH=$SCRIPT_PATH/../server-files

    # trust k3s-generated CA
    trust_k3s_ca

    # update /etc/hosts file (macOS and Linux only)
    update_hosts_file

    # check for existing tunnel and spawn if needed
    spawn_ssh_tunnel

    # copy certs for cert-manager
    mkdir -p $KUSTOMIZE_PATH/cert-manager/certs
    cp $SERVER_FILES_PATH/server-ca.crt $KUSTOMIZE_PATH/cert-manager/certs/server-ca.crt
    cp $SERVER_FILES_PATH/server-ca.key $KUSTOMIZE_PATH/cert-manager/certs/server-ca.key

    # set kubeconfig path
    KUBECONFIG_PATH=$(readlink -f "$SERVER_FILES_PATH/kubeconfig")
    export KUBECONFIG="$KUBECONFIG_PATH"

    ## gateway-api
    deploy_gateway_api

    ## metrics-server
    echo "deploying metrics-server"
    kustomize build $KUSTOMIZE_PATH/metrics-server | envsubst | kubectl apply -f -
    wait_for_deployment metrics-server kube-system

    ## cert-manager
    echo "deploying cert-manager"
    kustomize build $KUSTOMIZE_PATH/cert-manager | envsubst | kubectl apply -f -
    echo "Waiting for cert-manager deployments to be created..."
    wait_for_deployment cert-manager cert-manager
    wait_for_deployment cert-manager-webhook cert-manager
    wait_for_deployment cert-manager-cainjector cert-manager
    echo "Waiting for cert-manager CRDs to be established..."
    kubectl wait --for=condition=established --timeout=120s crd/clusterissuers.cert-manager.io
    kubectl wait --for=condition=established --timeout=120s crd/certificates.cert-manager.io
    kubectl wait --for=condition=established --timeout=120s crd/certificaterequests.cert-manager.io
    echo "Waiting for cert-manager CA secret to be created..."
    kubectl wait --for=create secret/debian-k3s-tls -n cert-manager --timeout=60s

    ## cert-manager-ca
    echo "deploying cert-manager-ca"
    kustomize build $KUSTOMIZE_PATH/cert-manager-ca | envsubst | kubectl apply -f -
    echo "Waiting for ClusterIssuer to be ready..."
    kubectl wait --for=condition=ready clusterissuer/debian-k3s-ca-issuer --timeout=60s

    ## trust-manager
    echo "deploying trust-manager"
    kustomize build $KUSTOMIZE_PATH/trust-manager | envsubst | kubectl apply -f -
    echo "Waiting for trust-manager deployments to be created..."
    wait_for_deployment trust-manager trust-manager
    echo "Waiting for trust-manager CRDs to be established..."
    kubectl wait --for=condition=established --timeout=120s crd/bundles.trust.cert-manager.io

    ## traefik
    echo "deploying traefik"
    kustomize build $KUSTOMIZE_PATH/traefik | envsubst | kubectl apply -f -
    wait_for_deployment traefik traefik
    echo "Waiting for traefik CA secret to be created..."
    kubectl wait --for=create secret/debian-k3s-gateway-tls -n traefik --timeout=60s

    ## linkerd
    echo "deploying linkerd"
    kustomize build $KUSTOMIZE_PATH/linkerd | envsubst | kubectl apply -f -
    wait_for_deployment tap linkerd
    wait_for_deployment tap-injector linkerd
    wait_for_deployment web linkerd
    wait_for_deployment metrics-api linkerd

    ## monitoring
    echo "deploying monitoring"
    kustomize build $KUSTOMIZE_PATH/monitoring | envsubst | kubectl apply -f -
    wait_for_deployment kube-prometheus-stack-grafana monitoring
    wait_for_deployment kube-prometheus-stack-kube-state-metrics monitoring
    wait_for_deployment kube-prometheus-stack-operator monitoring

    ## elasticsearch
    echo "deploying elasticsearch"
    kustomize build $KUSTOMIZE_PATH/elasticsearch | envsubst | kubectl apply -f -
    wait_for_deployment elasticsearch-kibana elasticsearch 300s

    ## linkerd-control-plane
    echo "deploying linkerd-control-plane"
    kustomize build $KUSTOMIZE_PATH/linkerd-control-plane | envsubst | kubectl apply -f -
    wait_for_deployment linkerd-destination linkerd
    wait_for_deployment linkerd-identity linkerd
    wait_for_deployment linkerd-proxy-injector linkerd

    ## traefik-routes
    echo "deploying traefik-routes"
    kustomize build $KUSTOMIZE_PATH/traefik-routes | envsubst | kubectl apply -f -
    # TODO: wait for traefik-routes to be ready
}

load_instance_details() {
    pushd terraform/$CLOUD_PROVIDER/
    instance_ipv4=$(terraform output -raw instance_ipv4)
    instance_username=$(terraform output -raw instance_username)
    instance_ssh_port=$(terraform output -raw ssh_port)
    popd
}

cmd_connect() {
    load_instance_details

    # TODO: make sure we have provisioned and these variables are set correctly

    ssh -p $instance_ssh_port $instance_username@$instance_ipv4
}

cmd_cleanup() {
    terraform_destroy

    # Cleanup server-files
    rm -rf $SCRIPT_PATH/../server-files

    # Cleanup kustomize certs
    rm -rf $SCRIPT_PATH/../kustomize/cert-manager/certs

    uninstall_certificate
    remove_hosts_entry
}

# usage
usage() {
    echo "Usage: cli <command>"
    echo ""
    echo "Commands:"
    echo "  create      Create a new instance"
    echo "  apply       Apply Kubernetes manifests to the instance"
    echo "  connect     SSH into the instance"
    echo "  cleanup     Destroy the instance and clean up local files"
    echo "  help        Show this help message"
}

# route commands
case $1 in
    create)
        cmd_create
        ;;
    apply)
        cmd_apply
        ;;
    connect)
        cmd_connect
        ;;
    cleanup)
        cmd_cleanup
        ;;
    help|--help|-h|"")
        usage
        ;;
    *)
        echo "Unknown command: $1"
        usage
        exit 1
        ;;
esac
